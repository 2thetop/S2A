[ProjectNameSection]
Project = CodeShield

[SerialPortSection]
# arduino port
ComPort = /dev/ttyACM0
# baudrate must match the value of the arduino sketch
BaudRate = 115200
TimeOut = 1

# this value must match that in the .s2e script
[HTTPServerSection]
PORT = 50208

# specify the initial pin direction for each pin used by the application
# format is PIN = DIRECTION
[ArduinoPinDirection]
# relay
2 = output
# piezo
3 = output
# servo
5 = output
# white LED
6 = output
# RGB blue LED
9 = output
# RGB green LED
10 = output
# RGB red LED
11 = output
# button switch
12 = input
#slide switch
13 = input
# encoder_A A0 = pin 14
14 = output
# encoder_b A1 = pin 15
15 = output
# pot A2 = pin 16
16 = input
# hall effect A3 = pin 17
17 = input
# thermistor A4 = pin 18
18 = input
# photocell A5 = pin 19
19 = input

# for each arduino pin used as an output, specify
# the output type and its value
# format is PIN = TYPE, VALUE
[ArduinoInitialOutputPinValues]
2 = digital,0
3 = digital,0
5 = digital,0
6 = digital,0
9 = digital,0
10 = digital,0
11 = digital,0


# These values must be the same used in the Scratch .s2e file
# format is PIN = Scratch_ID
[ReporterMapSection]
14 = encoder
12 = button
13 = slide
16 = pot
17 = hall
18 = thermo
19 = photo

# report pin type specifier
# format is PIN = TYPE
[ReporterPinToTypeMap]
encoder = analog
12 = digital
13 = digital
16 = analog
17 = analog
18 = analog
19 = analog

# this section contains Scratch commands as the key
# these values must be the same as the ones specified in the Scratch .s2e file
# format is COMMAND = PIN, #_OF_PARAMETERS FOR THE COMMAND, TYPE
# a type value of None indicates that this is a "special" command and is not
# a simple pin manipulation

[CommandPinMapSection]
relay_state = 2,1,digital
piezo_tone = 3,2,None
servo_degrees = 5,1,None
white_led = 6,1,digital
white_led_pwm = 6,1,analog
blue_led = 9,1,digital
blue_led_pwm = 9,1,analog
green_led = 10,1,digital
green_led_pwm = 10,1,analog
red_led = 11,1,digital
red_led_pwm = 11,1,analog

# These are the set of JSON commands sent to Arduino
# The values in CAPS will be replaced with the actual values at run time
[JsonStringTemplateSection]
writeValueToPin = {"write":{"pin":PIN,"type":"TYPE","value":VALUE}}
setPinDirection = {"mode":{"pin":PIN,"mode":"MODE"}}
readPinValue = {"read":{"pin":PIN,"type":"TYPE"}}
readEncoder = {"read":{"encoder":100,"type":"analog"}}
writeServo = {"write":{"type":"servo","value":VALUE, "pin":5}}
writePiezo = {"write":{"type":"piezo","freq":FREQ,"time":TIME}}

# any special processing needed
# for CodeSheild, the Tone and Servo commands do not restore
# interrupts appropriately, so special LED processing is needed
[SpecialProcessing]
enable_special_LED_processing = True
